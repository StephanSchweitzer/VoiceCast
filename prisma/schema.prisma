generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id              String           @id @default(cuid())
  name            String?
  email           String           @unique
  password        String
  image           String?
  role            String           @default("user")
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  voices          Voice[]
  savedVoices     SavedVoice[]
  generatedAudios GeneratedAudio[]
  speakSessions   SpeakSession[]
  preferences     UserPreferences?
}

model Genre {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())
  voices    Voice[]
}

model Voice {
  id              String           @id @default(cuid())
  name            String
  description     String?
  audioSample     String
  duration        Float?
  isPublic        Boolean          @default(false)
  gender          String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  userId          String
  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  genreId         String?
  genre           Genre?           @relation(fields: [genreId], references: [id])
  savedBy         SavedVoice[]
  generatedAudios GeneratedAudio[]
}

model SavedVoice {
  id        String   @id @default(cuid())
  userId    String
  voiceId   String
  createdAt DateTime @default(now())

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  voice Voice @relation(fields: [voiceId], references: [id], onDelete: Cascade)

  @@unique([userId, voiceId])
}

model SpeakSession {
  id              String           @id @default(cuid())
  name            String
  userId          String
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  generatedAudios GeneratedAudio[]

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, updatedAt])
}

model GeneratedAudio {
  id        String   @id @default(cuid())
  userId    String
  voiceId   String
  sessionId String
  text      String
  emotion   String
  arousal   Float
  valence   Float
  filePath  String
  isLiked   Boolean?
  createdAt DateTime @default(now())

  user    User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  voice   Voice        @relation(fields: [voiceId], references: [id], onDelete: Cascade)
  session SpeakSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
  @@index([sessionId, createdAt])
}

model UserPreferences {
  id       String  @id @default(cuid())
  userId   String  @unique
  autoPlay Boolean @default(true)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}
